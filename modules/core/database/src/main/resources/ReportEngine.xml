<?xml version="1.0" encoding="UTF-8"?>
<!--****************************************************-->
<!-- Copyright (c) 2012 Report Engine -->
<!-- All rights reserved. -->
<!--****************************************************-->
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="ReportEngine">

<resultMap id="TestSuiteResultMap" class="com.redhat.reportengine.server.dbmap.TestSuite">
<result property="id" column="id"/>
<result property="testSuiteName" column="test_suite_name"/>
<result property="testStatus" column="test_status"/>
<result property="testComments" column="test_comments"/>
<result property="testBuild" column="test_build"/>
<result property="localStartTime" column="local_start_time"/>
<result property="localEndTime" column="local_end_time"/>
<result property="remoteStartTime" column="remote_start_time"/>
<result property="remoteEndTime" column="remote_end_time"/>
<result property="testHost" column="test_host"/>
<result property="testReference" column="test_reference"/>
<result property="testReferenceId" column="test_reference_id"/>
</resultMap>

<resultMap id="TestSuiteResultMapFull" class="com.redhat.reportengine.server.dbmap.TestSuite">
<result property="id" column="id"/>
<result property="testSuiteName" column="test_suite_name"/>
<result property="testStatus" column="test_status"/>
<result property="testComments" column="test_comments"/>
<result property="testBuild" column="test_build"/>
<result property="localStartTime" column="local_start_time"/>
<result property="localEndTime" column="local_end_time"/>
<result property="remoteStartTime" column="remote_start_time"/>
<result property="remoteEndTime" column="remote_end_time"/>
<result property="testHost" column="test_host"/>
<result property="testReference" column="test_reference"/>
<result property="testReferenceId" column="test_reference_id"/>
<result property="totalCases" column="total_cases"/>
<result property="passedCases" column="passed_cases"/>
<result property="failedCases" column="failed_cases"/>
<result property="skippedCases" column="skipped_cases"/>
<result property="totalChanges" column="total_changes"/>
<result property="passedChanges" column="passed_changes"/>
<result property="failedChanges" column="failed_changes"/>
<result property="skippedChanges" column="skipped_changes"/>
<result property="testDuration" column="test_duration"/>
</resultMap>


<resultMap id="TestSuiteAggregationResultMap" class="com.redhat.reportengine.server.dbmap.TestSuite">
<result property="id" column="id"/>
<result property="testSuiteId" column="test_suite_id"/>
<result property="totalCases" column="total_cases"/>
<result property="passedCases" column="passed_cases"/>
<result property="failedCases" column="failed_cases"/>
<result property="skippedCases" column="skipped_cases"/>
<result property="totalChanges" column="total_changes"/>
<result property="passedChanges" column="passed_changes"/>
<result property="failedChanges" column="failed_changes"/>
<result property="skippedChanges" column="skipped_changes"/>
<result property="testReferenceId" column="test_reference_id"/>
<result property="testDuration" column="test_duration"/>
</resultMap>

<resultMap id="TestSuitePreAggregationResultMap" class="com.redhat.reportengine.server.dbmap.TestSuiteAggregation">
<result property="testResult" column="test_result"/>
<result property="testCount" column="test_count"/>
</resultMap>


<parameterMap id="TestSuiteAggregationParameterMap" class="com.redhat.reportengine.server.dbmap.TestSuite">
<parameter property="testSuiteId"/>
<parameter property="totalCases"/>
<parameter property="passedCases"/>
<parameter property="failedCases"/>
<parameter property="skippedCases"/>
<parameter property="totalChanges"/>
<parameter property="passedChanges"/>
<parameter property="failedChanges"/>
<parameter property="skippedChanges"/>
<parameter property="testReferenceId"/>
<parameter property="testDuration"/>
</parameterMap>

<parameterMap id="TestSuiteParameterMapTopN" class="com.redhat.reportengine.server.dbmap.TestSuite">
<parameter property="orderBy"/>
<parameter property="topN"/>
</parameterMap>

<parameterMap id="TestSuiteParameterMap" class="com.redhat.reportengine.server.dbmap.TestSuite">
<parameter property="id"/>
<parameter property="testSuiteName"/>
<parameter property="testBuild"/>
<parameter property="testStatus"/>
<parameter property="testComments"/>
<parameter property="localStartTime"/>
<parameter property="remoteStartTime"/>
<parameter property="testReferenceId"/>
<parameter property="testHost"/>
</parameterMap>

<parameterMap id="updateTestSuiteParameterMap" class="com.redhat.reportengine.server.dbmap.TestSuite">
<parameter property="testStatus"/>
<parameter property="testBuild"/>
<parameter property="testComments"/>
<parameter property="localEndTime"/>
<parameter property="remoteEndTime"/>
<parameter property="id"/>
</parameterMap>

<parameterMap id="updateTestSuiteNameParameterMap" class="com.redhat.reportengine.server.dbmap.TestSuite">
<parameter property="testSuiteName"/>
<parameter property="testComments"/>
<parameter property="id"/>
</parameterMap>

<parameterMap id="updateTestSuiteStatusParameterMap" class="com.redhat.reportengine.server.dbmap.TestSuite">
<parameter property="testStatus"/>
<parameter property="id"/>
</parameterMap>

<!-- Test Group-->
<resultMap id="TestGroupResultMap" class="com.redhat.reportengine.server.dbmap.TestGroup">
<result property="id" column="id"/>
<result property="testSuiteId" column="test_suite_id"/>
<result property="testGroup" column="test_group"/>
<result property="testComments" column="test_comments"/>
<result property="localTime" column="local_time"/>
<result property="remoteTime" column="remote_time"/>
</resultMap>

<resultMap id="TestGroupSuiteResultMap" class="com.redhat.reportengine.server.dbmap.TestGroup">
<result property="id" column="id"/>
<result property="testSuiteId" column="test_suite_id"/>
<result property="testGroup" column="test_group"/>
<result property="testSuiteName" column="test_suite_name"/>
<result property="testBuild" column="test_build"/>
</resultMap>

<resultMap id="TestGroupResultMapByTestCaseCount" class="com.redhat.reportengine.server.dbmap.TestGroup">
<result property="testSuiteId" column="test_suite_id"/>
<result property="id" column="id"/>
<result property="testGroup" column="test_group"/>
<result property="totalCases" column="total_cases"/>
<result property="passedCases" column="passed_cases"/>
<result property="failedCases" column="failed_cases"/>
<result property="skippedCases" column="skipped_cases"/>
</resultMap>

<parameterMap id="TestGroupParameterMap" class="com.redhat.reportengine.server.dbmap.TestGroup">
<parameter property="testSuiteId"/>
<parameter property="testGroup"/>
<parameter property="testComments"/>
<parameter property="localTime"/>
<parameter property="remoteTime"/>
</parameterMap>


<!-- Test Case-->
<resultMap id="TestCaseResultMap" class="com.redhat.reportengine.server.dbmap.TestCase">
<result property="id" column="id"/>
<result property="testSuiteId" column="test_suite_id"/>
<result property="testGroupId" column="test_group_id"/>
<result property="testName" column="test_name"/>
<result property="testArguments" column="test_arguments"/>
<result property="testResult" column="test_result"/>
<result property="testComments" column="test_comments"/>
<result property="testFiles" column="test_files"/>
<result property="testGuiFiles" column="test_gui_files"/>
<result property="localStartTime" column="local_start_time"/>
<result property="remoteStartTime" column="remote_start_time"/>
<result property="localEndTime" column="local_end_time"/>
<result property="remoteEndTime" column="remote_end_time"/>
</resultMap>

<resultMap id="TestCaseDetailResultMap" class="com.redhat.reportengine.server.dbmap.TestCase">
<result property="id" column="id"/>
<result property="testName" column="test_name"/>
<result property="testArguments" column="test_arguments"/>
<result property="testResult" column="test_result"/>
<result property="testComments" column="test_comments"/>
<result property="testFiles" column="test_files"/>
<result property="testGuiFiles" column="test_gui_files"/>
<result property="localStartTime" column="local_start_time"/>
<result property="remoteStartTime" column="remote_start_time"/>
<result property="localEndTime" column="local_end_time"/>
<result property="remoteEndTime" column="remote_end_time"/>
<result property="testDuration" column="test_duration"/>
<result property="testSuiteId" column="test_suite_id"/>
<result property="testGroup" column="test_group"/>
<result property="testSuiteName" column="test_suite_name"/>
<result property="testBuild" column="test_build"/>
</resultMap>

<resultMap id="TestCaseReportResultMap" class="com.redhat.reportengine.server.dbmap.TestCase">
<result property="id" column="id"/>
<result property="testSuiteId" column="test_suite_id"/>
<result property="testGroupId" column="test_group_id"/>
<result property="testName" column="test_name"/>
<result property="testArguments" column="test_arguments"/>
<result property="testResult" column="test_result"/>
<result property="localStartTime" column="local_start_time"/>
<result property="localEndTime" column="local_end_time"/>
<result property="testDuration" column="test_duration"/>
<result property="testGuiFiles" column="test_gui_files"/>
</resultMap>

<parameterMap id="TestCaseParameterMap" class="com.redhat.reportengine.server.dbmap.TestCase">
<parameter property="testSuiteId"/>
<parameter property="testGroupId"/>
<parameter property="testName"/>
<parameter property="testArguments"/>
<parameter property="testResult"/>
<parameter property="testComments"/>
<parameter property="testFiles"/>
<parameter property="testGuiFiles"/>
<parameter property="remoteStartTime"/>
<parameter property="localStartTime"/>
<parameter property="remoteEndTime"/>
<parameter property="localEndTime"/>
</parameterMap>

<parameterMap id="TestCaseParameterMapUpdate" class="com.redhat.reportengine.server.dbmap.TestCase">
<parameter property="testResult"/>
<parameter property="testComments"/>
<parameter property="testFiles"/>
<parameter property="testGuiFiles"/>
<parameter property="remoteEndTime"/>
<parameter property="localEndTime"/>
<parameter property="id"/>
</parameterMap>

<parameterMap id="TestCaseParameterMapUpdateResult" class="com.redhat.reportengine.server.dbmap.TestCase">
<parameter property="testResultNew"/>
<parameter property="testSuiteId"/>
<parameter property="testResult"/>
</parameterMap>

<parameterMap id="TestCaseParameterMapID" class="com.redhat.reportengine.server.dbmap.TestCase">
<parameter property="testSuiteId"/>
<parameter property="testGroupId"/>
<parameter property="testName"/>
<parameter property="localStartTime"/>
<parameter property="remoteStartTime"/>
</parameterMap>

<!-- Test Logs -->
<parameterMap id="TestLogsParameterMap" class="com.redhat.reportengine.server.dbmap.TestLogs">
<parameter property="testSuiteId"/>
<parameter property="testGroupId"/>
<parameter property="testCaseId"/>
<parameter property="sequenceNumber"/>
<parameter property="logLevel"/>
<parameter property="logTime"/>
<parameter property="localTime"/>
<parameter property="className"/>
<parameter property="methodName"/>
<parameter property="message"/>
<parameter property="throwable"/>
</parameterMap>

<resultMap id="TestLogsResultMap" class="com.redhat.reportengine.server.dbmap.TestLogs">
<result property="id" column="id"/>
<result property="testSuiteId" column="test_suite_id"/>
<result property="testGroupId" column="test_group_id"/>
<result property="testCaseId" column="test_case_id"/>
<result property="sequenceNumber" column="sequence_number"/>
<result property="logLevel" column="log_level"/>
<result property="logTime" column="log_time"/>
<result property="localTime" column="local_time"/>
<result property="className" column="class_name"/>
<result property="methodName" column="method_name"/>
<result property="message" column="message"/>
<result property="throwable" column="throwable"/>
</resultMap>


<select id="getTestSuiteById" parameterClass="java.lang.Integer" resultMap="TestSuiteResultMapFull">
select * from viewgettestsuitesdetailed where id=$id$
</select>

<select id="getTestSuiteByNameRef" parameterClass="com.redhat.reportengine.server.dbmap.TestSuite" resultMap="TestSuiteResultMap">
select * from viewgettestsuites where test_suite_name='$testSuiteName$' AND test_reference='$testReference$' order by id desc LIMIT 1
</select>

<select id="getTestSuites" resultMap="TestSuiteResultMapFull">
select * from viewgettestsuitesdetailed order by local_start_time desc
</select>

<select id="getTopNTestSuites" parameterClass="com.redhat.reportengine.server.dbmap.TestSuite" resultMap="TestSuiteResultMapFull">
select * from viewgettestsuitesdetailed order by $orderBy$ desc LIMIT $topN$
</select>

<select id="getTopNTestSuitesExcludeRunning" parameterClass="com.redhat.reportengine.server.dbmap.TestSuite" resultMap="TestSuiteResultMapFull">
select * from viewgettestsuitesdetailed WHERE test_status NOT LIKE 'Running' order by $orderBy$ desc LIMIT $topN$
</select>

<select id="getTrendReportExcludeRunning" parameterClass="com.redhat.reportengine.server.dbmap.TestSuite" resultMap="TestSuiteResultMapFull">
select * from viewgettestsuitesdetailed WHERE test_status NOT LIKE 'Running' AND local_start_time &gt;= '$fromTime$' AND local_start_time &lt;= '$toTime$' AND test_reference_id=$testReferenceId$ ORDER BY $orderBy$ ASC
</select>

<select id="getTopNTestReferenceAggregationExcludeRunning" parameterClass="com.redhat.reportengine.server.dbmap.TestSuite" resultMap="TestSuiteResultMapFull">
select * from viewgettestsuitesdetailed WHERE test_status NOT LIKE 'Running' AND test_reference_id=$testReferenceId$ order by $orderBy$ desc LIMIT $topN$
</select>

<select id="getTopTestSuitesByTestReferenceIds" parameterClass="java.lang.String" resultMap="TestSuiteResultMapFull">
SELECT * FROM (SELECT DISTINCT ON (test_reference_id) test_reference_id, id, test_suite_name, test_status, test_comments, test_build, local_start_time, local_end_time, remote_start_time, remote_end_time, test_host, test_reference, total_cases, passed_cases, failed_cases, skipped_cases, total_changes, passed_changes, failed_changes, skipped_changes, test_duration FROM viewgettestsuitesdetailed WHERE test_reference_id IN ($referenceIds$) AND test_status NOT LIKE 'Running' ORDER BY test_reference_id, local_start_time DESC) tmp_table ORDER BY local_start_time DESC
</select>

<select id="getTestSuitesNonAggregate" resultMap="TestSuiteResultMap">
select * from viewgettestsuites where test_status NOT LIKE 'Running' AND aggregation_status=false order by local_start_time asc
</select>

<select id="getTestSuitesRunning" resultMap="TestSuiteResultMap">
select * from viewgettestsuites where test_status LIKE 'Running' order by local_start_time asc
</select>

<select id="getTestSuitePreAggregationByTestSuiteId" parameterClass="java.lang.Integer" resultMap="TestSuitePreAggregationResultMap">
select test_result, count(test_result) as test_count from re_test_case  where test_suite_id=$id$ group by test_result
</select>

<select id="getTestSuiteAggregationByReferenceId" parameterClass="java.lang.Integer" resultMap="TestSuiteAggregationResultMap">
SELECT * FROM re_test_suite_aggregation where test_reference_id=$test_reference_id$ order by id desc LIMIT 1
</select>

<insert id="insertTestSuite" parameterMap="TestSuiteParameterMap">
insert into re_test_suite (id, test_suite_name, test_build, test_status, test_comments, local_start_time, remote_start_time, test_reference_id, test_host) values (?,?,?,?,?,?,?,?,?)
</insert>

<update id="enableTestSuiteAggregationStatus" parameterClass="java.lang.Integer">
UPDATE re_test_suite SET aggregation_status=true WHERE id=$id$
</update>

<update id="updateTestSuite" parameterMap="updateTestSuiteParameterMap">
UPDATE re_test_suite SET test_status=?, test_build=?, test_comments=?, local_end_time=?, remote_end_time=? WHERE id=?
</update>

<update id="updateTestSuiteName" parameterMap="updateTestSuiteNameParameterMap">
UPDATE re_test_suite SET test_suite_name=?, test_comments=? WHERE id=?
</update>

<update id="updateTestSuiteStatusById" parameterMap="updateTestSuiteStatusParameterMap">
UPDATE re_test_suite SET test_status=? WHERE id=?
</update>

<insert id="insertTestSuiteAggregation" parameterMap="TestSuiteAggregationParameterMap">
insert into re_test_suite_aggregation (test_suite_id, total_cases, passed_cases, failed_cases, skipped_cases, total_changes, passed_changes, failed_changes, skipped_changes, test_reference_id, test_duration) values (?,?,?,?,?,?,?,?,?,?,?)
</insert>

<select id="getTestSuiteNextId" resultClass="java.lang.Integer">
select * from nextval('re_test_suite_id_seq') as id
</select>

<!-- Test Group -->

<insert id="insertTestGroup" parameterMap="TestGroupParameterMap">
insert into re_test_group (test_suite_id, test_group, test_comments, local_time, remote_time) values (?,?,?,?,?)
</insert>

<select id="getTestGroupWithTestSuiteIdTestGroup" parameterClass="com.redhat.reportengine.server.dbmap.TestGroup" resultMap="TestGroupResultMap">
SELECT * FROM re_test_group WHERE test_suite_id=$testSuiteId$ AND test_group LIKE '$testGroup$' order by local_time desc
</select>

<select id="getTestGroupSuiteById" parameterClass="java.lang.Integer" resultMap="TestGroupSuiteResultMap">
SELECT tg.id, tg.test_suite_id, tg.test_group, ts.test_suite_name, ts.test_build FROM re_test_group tg, re_test_suite ts where tg.id=$id$ and tg.test_suite_id=ts.id
</select>

<select id="getTestGroupsByIdDetailedCount" parameterClass="java.lang.Integer" resultMap="TestGroupResultMapByTestCaseCount">
select tg.test_suite_id, rt.test_group_id as id, tg.test_group, sum(rt.test_cases) as total_cases, sum(case when rt.test_result='Passed' then rt.test_cases else 0 end) as
passed_cases, sum(case when rt.test_result='Failed' then rt.test_cases else 0 end) as failed_cases, sum(case when rt.test_result='Skipped' then rt.test_cases else 0 end) as skipped_cases from (select test_group_id, test_result, count(test_result) as test_cases from re_test_case where test_suite_id=$id$ group by test_group_id, test_result) rt, re_test_group tg where tg.id=rt.test_group_id group by rt.test_group_id, tg.test_group, tg.test_suite_id order by rt.test_group_id asc
</select>

<!-- Test Case -->

<insert id="insertTestCase" parameterMap="TestCaseParameterMap">
insert into re_test_case (test_suite_id, test_group_id, test_name, test_arguments, test_result, test_comments, test_files, test_gui_files, remote_start_time, local_start_time, remote_end_time, local_end_time) values (?,?,?,?,?,?,?,?,?,?,?,?)
</insert>

<update id="updateTestCase" parameterMap="TestCaseParameterMapUpdate">
UPDATE re_test_case SET test_result=?, test_comments=?, test_files=?, test_gui_files=?, remote_end_time=?, local_end_time=? WHERE id=?
</update>

<update id="updateTestCaseResult" parameterMap="TestCaseParameterMapUpdateResult">
UPDATE re_test_case SET test_result=? WHERE test_suite_id=? AND test_result=? 
</update>

<select id="getTestCaseID" parameterMap="TestCaseParameterMapID" resultMap="TestCaseResultMap">
SELECT * FROM re_test_case WHERE test_suite_id=? AND test_group_id=? AND test_name LIKE ? AND local_start_time=? AND remote_start_time=?
</select>

<select id="getTestCaseDetailById" parameterClass="java.lang.Integer" resultMap="TestCaseDetailResultMap">
SELECT tc.id, tc.test_name, tc.test_arguments, tc.test_result, tc.test_comments, tc.test_files, tc.test_gui_files, tc.local_start_time, tc.local_end_time, tc.remote_start_time, tc.remote_end_time, COALESCE(((EXTRACT(EPOCH FROM tc.local_end_time)*1000) - EXTRACT(EPOCH FROM tc.local_start_time)*1000),0) as test_duration, tc.test_suite_id, tg.test_group, ts.test_suite_name, ts.test_build from re_test_case tc, re_test_group tg, re_test_suite ts where tc.id=$id$ AND tc.test_group_id=tg.id AND tc.test_suite_id=ts.id
</select>

<select id="getTestCases" parameterClass="com.redhat.reportengine.server.dbmap.TestCase" resultMap="TestCaseResultMap">
SELECT * FROM re_test_case WHERE test_suite_id=$testSuiteId$ AND test_group_id=$testGroupId$ order by local_start_time desc
</select>

<select id="getLatestTestCaseBySuiteID" parameterClass="java.lang.Integer" resultMap="TestCaseResultMap">
SELECT * FROM re_test_case WHERE test_suite_id=$testSuiteId$ order by id desc LIMIT 1
</select>

<!-- TEST case with screen shot -->
<select id="getTestCasesScreenShot" parameterClass="java.lang.Integer" resultMap="TestCaseResultMap">
SELECT * FROM re_test_case WHERE test_gui_files IS NOT NULL AND test_suite_id=$id$ order by local_start_time desc
</select>

<select id="getTestCasesReport" parameterClass="com.redhat.reportengine.server.dbmap.TestCase" resultMap="TestCaseReportResultMap">
SELECT * FROM re_view_gettestcasedetailreport WHERE test_suite_id=$testSuiteId$ AND test_group_id=$testGroupId$ order by local_start_time asc
</select>

<select id="getTestCasesReportBySuiteIdAll" parameterClass="com.redhat.reportengine.server.dbmap.TestCase" resultMap="TestCaseReportResultMap">
SELECT * FROM re_view_gettestcasedetailreport WHERE test_suite_id=$testSuiteId$ order by local_start_time asc
</select>

<select id="getTestCasesReportBySuiteIdAndStatus" parameterClass="com.redhat.reportengine.server.dbmap.TestCase" resultMap="TestCaseReportResultMap">
SELECT * FROM re_view_gettestcasedetailreport WHERE test_suite_id=$testSuiteId$ AND test_result='$testResult$' order by local_start_time asc
</select>

<select id="getTestCasesReportByGroupId" parameterClass="com.redhat.reportengine.server.dbmap.TestCase" resultMap="TestCaseReportResultMap">
SELECT * FROM re_view_gettestcasedetailreport WHERE test_group_id=$testGroupId$ order by local_start_time asc
</select>

<select id="getTestCasesReportByGroupIdAndStatus" parameterClass="com.redhat.reportengine.server.dbmap.TestCase" resultMap="TestCaseReportResultMap">
SELECT * FROM re_view_gettestcasedetailreport WHERE test_group_id=$testGroupId$  AND test_result='$testResult$' order by local_start_time asc
</select>


<!-- Test Logs -->

<insert id="insertTestLogs" parameterMap="TestLogsParameterMap">
insert into re_test_logs (test_suite_id, test_group_id, test_case_id, sequence_number, log_level, log_time, local_time, class_name, method_name, message, throwable) values (?,?,?,?,?,?,?,?,?,?,?)
</insert>

<select id="getTestLogsByTestSuiteId" parameterClass="java.lang.Integer" resultMap="TestLogsResultMap">
SELECT * FROM re_test_logs WHERE test_suite_id=$id$ ORDER BY log_time ASC
</select>

<select id="getTestLogsByTestGroupId" parameterClass="java.lang.Integer" resultMap="TestLogsResultMap">
SELECT * FROM re_test_logs WHERE test_group_id=$id$ ORDER BY log_time ASC
</select>

<select id="getTestLogsByTestCaseId" parameterClass="java.lang.Integer" resultMap="TestLogsResultMap">
SELECT * FROM re_test_logs WHERE test_case_id=$id$ ORDER BY log_time ASC
</select>

<select id="getTestLogsById" parameterClass="java.lang.Integer" resultMap="TestLogsResultMap">
SELECT * FROM re_test_logs WHERE id=$id$
</select>

<!-- Test Logs Ajax -->

<select id="getTestLogsByTestSuiteIdAjax" parameterClass="com.redhat.reportengine.server.dbmap.TestLogs" resultMap="TestLogsResultMap">
SELECT * FROM re_test_logs WHERE test_suite_id=$testSuiteId$ AND id>$id$ ORDER BY log_time ASC
</select>

<select id="getTestLogsByTestGroupIdAjax" parameterClass="com.redhat.reportengine.server.dbmap.TestLogs" resultMap="TestLogsResultMap">
SELECT * FROM re_test_logs WHERE test_group_id=$testGroupId$ AND id>$id$ ORDER BY log_time ASC
</select>

<select id="getTestLogsByTestCaseIdAjax" parameterClass="com.redhat.reportengine.server.dbmap.TestLogs" resultMap="TestLogsResultMap">
SELECT * FROM re_test_logs WHERE test_case_id=$testCaseId$ AND id>$id$ ORDER BY log_time ASC
</select>


<!-- Purge/Delete Logs -->

<delete id="deleteTestLogsByTestSuiteId" parameterClass="java.lang.Integer">
DELETE FROM re_test_logs WHERE test_suite_id=$id$
</delete>

<delete id="deleteTestCaseByTestSuiteId" parameterClass="java.lang.Integer">
DELETE FROM re_test_case WHERE test_suite_id=$id$
</delete>

<delete id="deleteTestGroupByTestSuiteId" parameterClass="java.lang.Integer">
DELETE FROM re_test_group WHERE test_suite_id=$id$
</delete>

<delete id="deleteTestSuiteAggregationByTestSuiteId" parameterClass="java.lang.Integer">
DELETE FROM re_test_suite_aggregation WHERE test_suite_id=$id$
</delete>

<delete id="deleteTestSuiteById" parameterClass="java.lang.Integer">
DELETE FROM re_test_suite WHERE id=$id$
</delete>

<delete id="deleteTestSuiteByIds" parameterClass="java.lang.String">
DELETE FROM re_test_suite WHERE id IN ($ids$)
</delete>

<!-- Test References - START -->

<parameterMap id="TestReferenceParameterMap" class="com.redhat.reportengine.server.dbmap.TestReference">
<parameter property="id"/>
<parameter property="testReference"/>
<parameter property="creationTime"/>
</parameterMap>

<parameterMap id="TestReferenceNameParameterMap" class="com.redhat.reportengine.server.dbmap.TestReference">
<parameter property="testReference"/>
</parameterMap>

<resultMap id="TestReferenceResultMap" class="com.redhat.reportengine.server.dbmap.TestReference">
<result property="id" column="id"/>
<result property="testReference" column="test_reference"/>
<result property="creationTime" column="creation_time"/>
</resultMap>

<select id="getTestReferenceNextId" resultClass="java.lang.Integer">
select * from nextval('re_test_reference_id_seq') as id
</select>

<insert id="insertTestReference" parameterMap="TestReferenceParameterMap">
INSERT INTO re_test_reference (id, test_reference, creation_time) values (?,?,?)
</insert>

<select id="getTestReferenceAll" resultMap="TestReferenceResultMap">
SELECT * FROM re_test_reference ORDER BY test_reference ASC
</select>

<select id="getTestReferenceLike" parameterClass="java.lang.String" resultMap="TestReferenceResultMap">
SELECT * FROM re_test_reference ORDER BY test_reference LIKE '%$searchFilter$%' ASC
</select>

<select id="getTestReferenceByName" parameterMap="TestReferenceNameParameterMap" resultMap="TestReferenceResultMap">
SELECT * FROM re_test_reference WHERE test_reference=?
</select>


<!-- Test References - END -->

<!-- File Storage - END -->


<parameterMap id="FileStorageParameterMap" class="com.redhat.reportengine.server.dbmap.FileStorage">
<parameter property="testCaseId"/>
<parameter property="fileName"/>
<parameter property="fileByte"/>
<parameter property="creationTime"/>
<parameter property="screenShot"/>
</parameterMap>

<resultMap id="FileStorageResultMapLimited" class="com.redhat.reportengine.server.dbmap.FileStorage">
<result property="id" column="id"/>
<result property="testCaseId" column="test_case_id"/>
<result property="creationTime" column="creation_time"/>
<result property="fileName" column="file_name"/>
<result property="screenShot" column="screen_shot"/>
</resultMap>

<resultMap id="FileStorageResultMapFull" class="com.redhat.reportengine.server.dbmap.FileStorage">
<result property="id" column="id"/>
<result property="testCaseId" column="test_case_id"/>
<result property="creationTime" column="creation_time"/>
<result property="fileName" column="file_name"/>
<result property="screenShot" column="screen_shot"/>
<result property="fileByte" column="file_byte"/>
</resultMap>


<resultMap id="ScreenShotResultMap" class="com.redhat.reportengine.server.dbmap.TestCase">
<result property="id" column="id"/>
<result property="testGuiFiles" column="test_gui_files"/>
</resultMap>

<insert id="insertFileStorage" parameterMap="FileStorageParameterMap">
INSERT INTO re_file_storage (test_case_id, file_name, file_byte, creation_time, screen_shot) values (?,?,?,?,?)
</insert>

<select id="getFileStorageByTestCaseId" parameterClass="java.lang.Integer" resultMap="FileStorageResultMapLimited">
SELECT id, test_case_id, creation_time, file_name, screen_shot FROM re_file_storage WHERE test_case_id=$test_case_id$
</select>

<select id="getFileStorageByTestCaseIdScreenShot" parameterClass="java.lang.Integer" resultMap="FileStorageResultMapLimited">
SELECT id, test_case_id, creation_time, file_name, screen_shot FROM re_file_storage WHERE test_case_id=$test_case_id$ AND screen_shot=true
</select>

<select id="getFileStorageById" parameterClass="java.lang.Integer" resultMap="FileStorageResultMapFull">
SELECT * FROM re_file_storage WHERE id=$id$
</select>

<select id="getScreenShotFiles" resultMap="ScreenShotResultMap">
select id, test_gui_files from re_test_case where test_gui_files is not null order by id desc
</select>

<!-- File Storage - END -->


<!-- Report Group - START -->

<parameterMap id="ReportGroupParameterMap" class="com.redhat.reportengine.server.dbmap.ReportGroup">
<parameter property="groupName"/>
<parameter property="emailTo"/>
<parameter property="emailCc"/>
<parameter property="creationTime"/>
<parameter property="testSuiteGroupEnabled"/>
<parameter property="id"/>
</parameterMap>

<resultMap id="ReportGroupResultMap" class="com.redhat.reportengine.server.dbmap.ReportGroup">
<result property="id" column="id"/>
<result property="groupName" column="group_name"/>
<result property="emailTo" column="email_to"/>
<result property="emailCc" column="email_cc"/>
<result property="creationTime" column="creation_time"/>
<result property="testSuiteGroupEnabled" column="test_suite_group_enabled"/>
</resultMap>

<select id="getReportGroupNextId" resultClass="java.lang.Integer">
select * from nextval('re_report_group_id_seq') as id
</select>

<insert id="insertReportGroup" parameterMap="ReportGroupParameterMap">
INSERT INTO re_report_group (group_name, email_to, email_cc, creation_time, test_suite_group_enabled, id) values (?,?,?,?,?,?)
</insert>

<update id="updateReportGroup" parameterMap="ReportGroupParameterMap">
UPDATE re_report_group SET group_name=?, email_to=?, email_cc=?, creation_time=?, test_suite_group_enabled=? WHERE id=? 
</update>

<delete id="deleteReportGroup" parameterClass="java.lang.Integer">
DELETE FROM re_report_group WHERE id=$Id$
</delete>

<select id="getReportGroupAll" resultMap="ReportGroupResultMap">
SELECT * FROM re_report_group ORDER BY group_name ASC
</select>

<select id="getReportGroupById" parameterClass="java.lang.Integer" resultMap="ReportGroupResultMap">
SELECT * FROM re_report_group WHERE id=$id$
</select>


<!-- Report Group - END -->

<!-- Report Group - START -->

<parameterMap id="ReportGroupReferenceParameterMap" class="com.redhat.reportengine.server.dbmap.ReportGroupReference">
<parameter property="reportGroupId"/>
<parameter property="testReferenceId"/>
</parameterMap>

<resultMap id="ReportGroupReferenceResultMap" class="com.redhat.reportengine.server.dbmap.ReportGroupReference">
<result property="reportGroupId" column="report_group_id"/>
<result property="testReferenceId" column="test_reference_id"/>
</resultMap>


<insert id="insertReportGroupReference" parameterMap="ReportGroupReferenceParameterMap">
INSERT INTO re_report_group_reference (report_group_id, test_reference_id) values (?,?)
</insert>

<select id="getReportGroupReferenceAll" resultMap="ReportGroupReferenceResultMap">
SELECT * FROM re_report_group_reference ORDER BY report_group_id ASC
</select>

<select id="getReportGroupReferenceByReportGroupId" parameterClass="java.lang.Integer" resultMap="ReportGroupReferenceResultMap">
SELECT * FROM re_report_group_reference WHERE report_group_id=$reportGroupId$
</select>

<delete id="deleteReportGroupReferenceByReportGroupId" parameterClass="java.lang.Integer">
DELETE FROM re_report_group_reference WHERE report_group_id=$reportGroupId$
</delete>

<!-- Report Group - END -->

<!-- Job Scheduler - START -->

<parameterMap id="JobSchedulerParameterMap" class="com.redhat.reportengine.server.dbmap.JobScheduler">
<parameter property="jobEnabled"/>
<parameter property="systemJob"/>
<parameter property="cronExpression"/>
<parameter property="jobName"/>
<parameter property="targetClassId"/>
<parameter property="dataReferenceId"/>
<parameter property="simpleJob"/>
<parameter property="repeatInterval"/>
<parameter property="repeatCount"/>
<parameter property="validFromTime"/>
<parameter property="validToTime"/>
<parameter property="jobFrequency"/>
<parameter property="jobWeekday"/>
<parameter property="jobDayMonth"/>
<parameter property="jobExecutionTime"/>
<parameter property="jobDescription"/>
<parameter property="creationTime"/>
<parameter property="lastEditTime"/>
<parameter property="jobData"/>
</parameterMap>

<resultMap id="JobSchedulerResultMap" class="com.redhat.reportengine.server.dbmap.JobScheduler">
<result property="id" column="id"/>
<result property="jobEnabled" column="job_enabled"/>
<result property="systemJob" column="system_job"/>
<result property="cronExpression" column="cron_expression"/>
<result property="jobName" column="job_name"/>
<result property="targetClassId" column="target_class_id"/>
<result property="dataReferenceId" column="data_reference_id"/>
<result property="simpleJob" column="simple_job"/>
<result property="repeatInterval" column="repeat_interval"/>
<result property="repeatCount" column="repeat_count"/>
<result property="validFromTime" column="valid_from_time"/>
<result property="validToTime" column="valid_to_time"/>
<result property="jobFrequency" column="job_frequency"/>
<result property="jobWeekday" column="job_weekday"/>
<result property="jobDayMonth" column="job_day_month"/>
<result property="jobExecutionTime" column="job_execution_time"/>
<result property="jobDescription" column="job_description"/>
<result property="creationTime" column="creation_time"/>
<result property="lastEditTime" column="last_edit_time"/>
<result property="targetClass" column="target_class"/>
<result property="targetClassDescription" column="target_class_description"/>
<result property="classType" column="class_type"/>
<result property="jobData" column="job_data"/>
</resultMap>


<select id="getJobSchedulerNextId" resultClass="java.lang.Integer">
select id from nextval('re_job_scheduler_id_seq') as id
</select>

<insert id="insertJobScheduler" parameterMap="JobSchedulerParameterMap">
INSERT INTO re_job_scheduler (job_enabled, system_job, cron_expression, job_name, target_class_id, data_reference_id, simple_job, repeat_interval, repeat_count, valid_from_time, valid_to_time, job_frequency, job_weekday, job_day_month, job_execution_time, job_description, creation_time, last_edit_time, job_data) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
</insert>

<delete id="deleteAscehduledJob" parameterClass="java.lang.Integer">
DELETE FROM re_job_scheduler WHERE id=$id$
</delete>

<update id="enableAscehduledJob" parameterClass="java.lang.Integer">
UPDATE re_job_scheduler SET job_enabled=true WHERE id=$jobId$ 
</update>

<update id="disableAscehduledJob" parameterClass="java.lang.Integer">
UPDATE re_job_scheduler SET job_enabled=false WHERE id=$jobId$ 
</update>

<select id="getJobSchedulerAll" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall
</select>

<select id="getUserJobSchedulerAll" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall WHERE system_job=false
</select>

<select id="getJobSchedulerByServerId" parameterClass="java.lang.Integer" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall WHERE id IN(SELECT job_id FROM re_server_job WHERE server_id=$serverId$)
</select>

<select id="getJobSchedulerByClassLike" parameterClass="java.lang.String" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall WHERE target_class LIKE '$target_class$%'
</select>

<select id="getJobSchedulerByClassLikeAndDataReference" parameterClass="com.redhat.reportengine.server.dbmap.JobScheduler" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall WHERE target_class LIKE '$targetClass$%' AND data_reference_id=$dataReferenceId$
</select>

<select id="getJobSchedulerById" parameterClass="java.lang.Integer" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall WHERE id=$id$
</select>

<select id="getJobSchedulerByJobName" parameterClass="java.lang.String" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall WHERE job_name='$jobName$'
</select>

<select id="getJobSchedulerByClassType" parameterClass="java.lang.String" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall WHERE class_type='$classType$'
</select>

<select id="getJobSchedulerByClassTypeAndDataReference" parameterClass="com.redhat.reportengine.server.dbmap.JobScheduler" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall WHERE class_type='$classType$' AND data_reference_id=$dataReferenceId$
</select>

<select id="getJobSchedulerByTargetClassIdAndReferenceId" parameterClass="com.redhat.reportengine.server.dbmap.JobScheduler" resultMap="JobSchedulerResultMap">
SELECT * FROM viewgetjobschedulerall WHERE target_class_id=$targetClassId$ AND data_reference_id=$dataReferenceId$
</select>


<!-- Report Group - END -->

<!-- Job Classes - START -->
<resultMap id="JobClassesResultMap" class="com.redhat.reportengine.server.dbmap.JobClasses">
<result property="id" column="id"/>
<result property="targetClass" column="target_class"/>
<result property="targetClassDescription" column="target_class_description"/>
<result property="classType" column="class_type"/>
</resultMap>

<select id="getJobClassesById" parameterClass="java.lang.Integer" resultMap="JobClassesResultMap">
SELECT * FROM re_job_classes WHERE id=$id$
</select>

<select id="getJobClassesByClass" parameterClass="java.lang.String" resultMap="JobClassesResultMap">
SELECT * FROM re_job_classes WHERE target_class='$target_class$'
</select>

<select id="getJobClassesByClassLike" parameterClass="java.lang.String" resultMap="JobClassesResultMap">
SELECT * FROM re_job_classes WHERE target_class LIKE '$target_class$%'
</select>

<select id="getJobClasses" resultMap="JobClassesResultMap">
SELECT * FROM re_job_classes
</select>

<select id="getJobClassesByClassType" parameterClass="java.lang.String" resultMap="JobClassesResultMap">
SELECT * FROM re_job_classes WHERE class_type='$classType$'
</select>

<!-- Job Classes - END -->


<!-- Report Engine Settings - START -->
<parameterMap id="EngineSettingsParameterMap" class="com.redhat.reportengine.server.dbmap.EngineSettings">
<parameter property="value"/>
<parameter property="key"/>
</parameterMap>

<resultMap id="EngineSettingsResultMap" class="com.redhat.reportengine.server.dbmap.EngineSettings">
<result property="key" column="key"/>
<result property="value" column="key_value"/>
</resultMap>

<select id="getEngineSettingsAll" resultMap="EngineSettingsResultMap">
SELECT * FROM re_settings
</select>

<select id="getEngineSettingsByKey" parameterClass="java.lang.String" resultMap="EngineSettingsResultMap">
SELECT * FROM re_settings WHERE key='$key$'
</select>

<insert id="insertEngineSettings" parameterMap="EngineSettingsParameterMap">
INSERT INTO re_settings (key_value, key) values (?,?)
</insert>

<update id="updateEngineSettings" parameterMap="EngineSettingsParameterMap">
UPDATE re_settings SET key_value=? WHERE key=? 
</update>

<delete id="deleteEngineSettings" parameterClass="java.lang.String">
DELETE FROM re_settings WHERE key='$key$'
</delete>

<!-- Report Engine Settings - END -->

<!-- Users - START -->
<parameterMap id="AuthUserParameterMap" class="com.redhat.reportengine.server.dbmap.AuthUser">
<parameter property="enabled"/>
<parameter property="internal"/>
<parameter property="ldapId"/>
<parameter property="userName"/>
<parameter property="firstName"/>
<parameter property="lastName"/>
<parameter property="email"/>
<parameter property="creationTime"/>
<parameter property="lastEditTime"/>
</parameterMap>

<parameterMap id="AuthUserPasswordParameterMap" class="com.redhat.reportengine.server.dbmap.AuthUser">
<parameter property="password"/>
<parameter property="passwordSalt"/>
<parameter property="userid"/>
</parameterMap>

<resultMap id="AuthUserResultMap" class="com.redhat.reportengine.server.dbmap.AuthUser">
<result property="id" column="id"/>
<result property="enabled" column="enabled"/>
<result property="internal" column="internal"/>
<result property="userName" column="user_name"/>
<result property="firstName" column="first_name"/>
<result property="lastName" column="last_name"/>
<result property="email" column="email"/>
<result property="creationTime" column="creation_time"/>
<result property="lastEditTime" column="last_edit_time"/>
<result property="userid" column="userid"/>
<result property="password" column="password"/>
<result property="passwordSalt" column="password_salt"/>
</resultMap>

<insert id="insertAuthUser" parameterMap="AuthUserParameterMap">
INSERT INTO re_auth_user (enabled, internal, ldap_id, user_name, first_name, last_name, email, creation_time, last_edit_time) values (?,?,?,?,?,?,?,?,?)
</insert>

<update id="updateAuthUser" parameterClass="com.redhat.reportengine.server.dbmap.AuthUser">
UPDATE re_auth_user SET enabled=$enabled$, ldap_id=$ldapId$, user_name='$userName$', first_name='$firstName$', last_name='$lastName$', email='$email$', last_edit_time='$lastEditTime$' WHERE id=$id$ 
</update>

<insert id="insertAuthUserPassword" parameterMap="AuthUserPasswordParameterMap">
INSERT INTO re_auth_user_password (password, password_salt, userid) values (?,?,?);
</insert>

<update id="updateAuthUserPassword" parameterMap="AuthUserPasswordParameterMap">
UPDATE re_auth_user_password SET password=?, password_salt=? WHERE userid=? 
</update>

<select id="getAuthUserAll" resultMap="AuthUserResultMap">
SELECT * FROM re_view_getuserlist
</select>

<select id="getAuthUserAllEnabled" resultMap="AuthUserResultMap">
SELECT * FROM re_view_getuserlist WHERE enabled=true
</select>

<select id="getAuthUserByName" parameterClass="com.redhat.reportengine.server.dbmap.AuthUser" resultMap="AuthUserResultMap">
SELECT * FROM re_view_getuserlist WHERE user_name='$userName$'
</select>

<select id="getAuthUserById" parameterClass="com.redhat.reportengine.server.dbmap.AuthUser" resultMap="AuthUserResultMap">
SELECT * FROM re_view_getuserlist WHERE id=$id$
</select>

<select id="getAuthUserByEmail" parameterClass="com.redhat.reportengine.server.dbmap.AuthUser" resultMap="AuthUserResultMap">
SELECT * FROM re_view_getuserlist WHERE email='$email$'
</select>

<!-- Users - END -->

<!-- LDAP - START -->
<parameterMap id="LdapParameterMap" class="com.redhat.reportengine.server.dbmap.LDAPDetails">
<parameter property="enabled"/>
<parameter property="name"/>
<parameter property="url"/>
<parameter property="baseDn"/>
</parameterMap>

<resultMap id="LdapResultMap" class="com.redhat.reportengine.server.dbmap.LDAPDetails">
<result property="id" column="id"/>
<result property="enabled" column="enabled"/>
<result property="name" column="name"/>
<result property="url" column="url"/>
<result property="baseDn" column="basedn"/>
</resultMap>

<insert id="insertLdap" parameterMap="LdapParameterMap">
INSERT INTO re_auth_ldap (enabled, name, url, basedn) values (?,?,?,?)
</insert>

<update id="updateLdap" parameterClass="com.redhat.reportengine.server.dbmap.LDAPDetails">
UPDATE re_auth_ldap SET enabled=$enabled$, name='$name$', url='$url$', basedn='$baseDn$' WHERE id=$id$ 
</update>

<select id="getLdapAll" resultMap="LdapResultMap">
SELECT * FROM re_auth_ldap
</select>

<select id="getLdapEnabled" resultMap="LdapResultMap">
SELECT * FROM re_auth_ldap WHERE enabled=true
</select>

<select id="getLdapByName" parameterClass="java.lang.String" resultMap="LdapResultMap">
SELECT * FROM re_auth_ldap WHERE name='$ldapName$'
</select>

<select id="getLdapById" parameterClass="java.lang.Integer" resultMap="LdapResultMap">
SELECT * FROM re_auth_ldap WHERE id=$id$
</select>

<!-- LDAP - END -->


<!-- Auth Role - START -->
<parameterMap id="AuthRoleParameterMap" class="com.redhat.reportengine.server.dbmap.AuthRole">
<parameter property="name"/>
<parameter property="description"/>
</parameterMap>

<resultMap id="AuthRoleResultMap" class="com.redhat.reportengine.server.dbmap.AuthRole">
<result property="id" column="id"/>
<result property="name" column="name"/>
<result property="description" column="description"/>
</resultMap>

<insert id="insertAuthRole" parameterMap="AuthRoleParameterMap">
INSERT INTO re_auth_role (name, description) values (?,?)
</insert>

<update id="updateAuthRole" parameterClass="com.redhat.reportengine.server.dbmap.AuthRole">
UPDATE re_auth_role SET name='$name$', description='$description$' WHERE id=$id$ 
</update>

<select id="getAuthRoleAll" resultMap="AuthRoleResultMap">
SELECT * FROM re_auth_role
</select>

<select id="getAuthRoleByName" parameterClass="com.redhat.reportengine.server.dbmap.AuthRole" resultMap="AuthRoleResultMap">
SELECT * FROM re_auth_role WHERE name='$name$'
</select>

<select id="getAuthRoleById" parameterClass="com.redhat.reportengine.server.dbmap.AuthRole" resultMap="AuthRoleResultMap">
SELECT * FROM re_auth_role WHERE id=$id$
</select>

<delete id="deleteAuthRoleById" parameterClass="com.redhat.reportengine.server.dbmap.AuthRole">
DELETE FROM re_auth_role WHERE id=$id$
</delete>

<!-- Auth Role - END -->


<!-- Auth Permission - START -->
<parameterMap id="AuthPermissionParameterMap" class="com.redhat.reportengine.server.dbmap.AuthPermission">
<parameter property="systemLevel"/>
<parameter property="name"/>
<parameter property="description"/>
</parameterMap>

<resultMap id="AuthPermissionResultMap" class="com.redhat.reportengine.server.dbmap.AuthPermission">
<result property="id" column="id"/>
<result property="name" column="name"/>
<result property="description" column="description"/>
</resultMap>

<insert id="insertAuthPermission" parameterMap="AuthPermissionParameterMap">
INSERT INTO re_auth_permission (name, description) values (?,?)
</insert>

<update id="updateAuthPermission" parameterClass="com.redhat.reportengine.server.dbmap.AuthPermission">
UPDATE re_auth_permission SET name='$name$', description='$description$' WHERE id=$id$ 
</update>

<select id="getAuthPermissionAll" resultMap="AuthPermissionResultMap">
SELECT * FROM re_auth_permission
</select>

<select id="getAuthPermissionByName" parameterClass="com.redhat.reportengine.server.dbmap.AuthPermission" resultMap="AuthPermissionResultMap">
SELECT * FROM re_auth_permission WHERE name='$name$'
</select>

<select id="getAuthPermissionById" parameterClass="com.redhat.reportengine.server.dbmap.AuthPermission" resultMap="AuthPermissionResultMap">
SELECT * FROM re_auth_role WHERE id=$id$
</select>

<delete id="deleteAuthPermissionById" parameterClass="com.redhat.reportengine.server.dbmap.AuthPermission">
DELETE FROM re_auth_permission WHERE id=$id$
</delete>

<!-- Auth Permission - END -->


<!-- Auth User Role Map - START -->

<parameterMap id="AuthUserRoleMapParameterMap" class="com.redhat.reportengine.server.dbmap.AuthUserRoleMap">
<parameter property="userId"/>
<parameter property="roleId"/>
</parameterMap>

<resultMap id="AuthUserRoleMapResultMap" class="com.redhat.reportengine.server.dbmap.AuthUserRoleMap">
<result property="userId" column="userid"/>
<result property="roleId" column="roleid"/>
</resultMap>

<insert id="insertAuthUserRoleMap" parameterMap="AuthUserRoleMapParameterMap">
INSERT INTO re_auth_user_role_map (userid, roleid) values (?,?)
</insert>

<select id="getAuthUserRoleMapAll" resultMap="AuthUserRoleMapResultMap">
SELECT * FROM re_auth_user_role_map
</select>

<select id="getAuthUserRoleMapByUserId" parameterClass="com.redhat.reportengine.server.dbmap.AuthUserRoleMap" resultMap="AuthUserRoleMapResultMap">
SELECT * FROM re_auth_user_role_map WHERE userid=$userId$
</select>

<select id="getAuthUserRoleMapByRoleId" parameterClass="com.redhat.reportengine.server.dbmap.AuthUserRoleMap" resultMap="AuthUserRoleMapResultMap">
SELECT * FROM re_auth_user_role_map WHERE roleid=$roleId$
</select>

<delete id="deleteAuthUserRoleMapByUserId" parameterClass="com.redhat.reportengine.server.dbmap.AuthUserRoleMap">
DELETE FROM re_auth_user_role_map WHERE userid=$userId$
</delete>

<!-- Auth User Role Map - END -->

<!-- Auth Role Permission Map - START -->

<parameterMap id="AuthRolePermissionMapParameterMap" class="com.redhat.reportengine.server.dbmap.AuthRolePermissionMap">
<parameter property="roleId"/>
<parameter property="permissionId"/>
</parameterMap>

<resultMap id="AuthRolePermissionMapResultMap" class="com.redhat.reportengine.server.dbmap.AuthRolePermissionMap">
<result property="roleId" column="roleid"/>
<result property="permissionId" column="permissionid"/>
</resultMap>

<insert id="insertAuthRolePermissionMap" parameterMap="AuthRolePermissionMapParameterMap">
INSERT INTO re_auth_role_permission_map (userid, roleid) values (?,?)
</insert>

<select id="getAuthRolePermissionMapAll" resultMap="AuthRolePermissionMapResultMap">
SELECT * FROM re_auth_role_permission_map
</select>

<select id="getAuthRolePermissionMapByRoleId" parameterClass="com.redhat.reportengine.server.dbmap.AuthRolePermissionMap" resultMap="AuthRolePermissionMapResultMap">
SELECT * FROM re_auth_role_permission_map WHERE roleid=$roleId$
</select>

<select id="getAuthRolePermissionMapByPermissionId" parameterClass="com.redhat.reportengine.server.dbmap.AuthRolePermissionMap" resultMap="AuthRolePermissionMapResultMap">
SELECT * FROM re_auth_role_permission_map WHERE permissionid=$permissionId$
</select>

<delete id="deleteAuthRolePermissionMapByRoleId" parameterClass="com.redhat.reportengine.server.dbmap.AuthRolePermissionMap">
DELETE FROM re_auth_role_permission_map WHERE roleid=$roleId$
</delete>

<!-- Auth Role Permission Map - END -->


<!-- Forget Password - START -->

<parameterMap id="ForgetPasswordParameterMap" class="com.redhat.reportengine.server.dbmap.ForgetPassword">
<parameter property="userId"/>
<parameter property="reference"/>
</parameterMap>

<resultMap id="ForgetPasswordResultMap" class="com.redhat.reportengine.server.dbmap.ForgetPassword">
<result property="id" column="id"/>
<result property="userId" column="userid"/>
<result property="reference" column="reference"/>
<result property="creationTime" column="creation_time"/>
</resultMap>

<insert id="insertForgetPassword" parameterMap="ForgetPasswordParameterMap">
INSERT INTO re_auth_user_forget_password (userid, reference) values (?,?)
</insert>

<select id="getForgetPasswordAll" resultMap="ForgetPasswordResultMap">
SELECT * FROM re_auth_user_forget_password
</select>

<select id="getForgetPasswordById" parameterClass="com.redhat.reportengine.server.dbmap.ForgetPassword" resultMap="ForgetPasswordResultMap">
SELECT * FROM re_auth_user_forget_password WHERE id=$id$
</select>

<select id="getForgetPasswordByUserId" parameterClass="com.redhat.reportengine.server.dbmap.ForgetPassword" resultMap="ForgetPasswordResultMap">
SELECT * FROM re_auth_user_forget_password WHERE userid=$userId$
</select>

<delete id="deleteForgetPasswordByUserId" parameterClass="com.redhat.reportengine.server.dbmap.ForgetPassword">
DELETE FROM re_auth_user_forget_password WHERE userid=$userId$
</delete>

<delete id="deleteForgetPasswordById" parameterClass="com.redhat.reportengine.server.dbmap.ForgetPassword">
DELETE FROM re_auth_user_forget_password WHERE id=$id$
</delete>

<delete id="deleteForgetPasswordByCreationTime" parameterClass="com.redhat.reportengine.server.dbmap.ForgetPassword">
DELETE FROM re_auth_user_forget_password WHERE creation_time &lt;= '$creationTime$'
</delete>

<!-- Auth Role Permission Map - END -->

<!-- Resource measurement - CPU -->
<insert id="createCpuTableSequence" parameterClass="java.lang.String">
CREATE SEQUENCE re_res_dynamic_seq_$sub_name$
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
</insert>

<insert id="createCpuTable" parameterClass="java.lang.String">
CREATE TABLE re_res_dynamic_table_$sub_name$
(
  id bigint NOT NULL default nextval('re_res_dynamic_seq_$sub_name$'),
  local_time timestamp NOT NULL DEFAULT statement_timestamp(),
  remote_time timestamp NOT NULL,
  "user" real NULL,
  sys real NULL,
  nice real NULL,
  idle real NULL,
  wait real NULL,
  irq real NULL,
  softIrq real NULL,
  stolen real NULL,
  combined real NULL,
  unique(id)
);
</insert>

<!-- Resource measurement - CPUs -->
<insert id="createCpusTableSequence" parameterClass="java.lang.String">
CREATE SEQUENCE re_res_dynamic_seq_$sub_name$
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
</insert>

<insert id="createCpusTable" parameterClass="java.lang.String">
CREATE TABLE re_res_dynamic_table_$sub_name$
(
  id bigint NOT NULL default nextval('re_res_dynamic_seq_$sub_name$'),
  local_time timestamp NOT NULL DEFAULT statement_timestamp(),
  remote_time timestamp NOT NULL,
  "user" real[] NULL,
  sys real[] NULL,
  nice real[] NULL,
  idle real[] NULL,
  wait real[] NULL,
  irq real[] NULL,
  softIrq real[] NULL,
  stolen real[] NULL,
  combined real[] NULL,
  unique(id)
);
</insert>

<!-- CPU - Usage -START -->
<parameterMap id="resourceCpuParameterMap" class="com.redhat.reportengine.server.dbmap.ResourceCpu">
<parameter property="remoteTime"/>
<parameter property="user"/>
<parameter property="sys"/>
<parameter property="nice"/>
<parameter property="idle"/>
<parameter property="wait"/>
<parameter property="irq"/>
<parameter property="softIrq"/>
<parameter property="stolen"/>
<parameter property="combined"/>
</parameterMap>

<resultMap id="resourceCpuResultMap" class="com.redhat.reportengine.server.dbmap.ResourceCpu">
<result property="id" column="id"/>
<result property="localTime" column="local_time"/>
<result property="remoteTime" column="remote_time"/>
<result property="user" column="user"/>
<result property="sys" column="sys"/>
<result property="nice" column="nice"/>
<result property="idle" column="idle"/>
<result property="wait" column="wait"/>
<result property="softIrq" column="softIrq"/>
<result property="stolen" column="stolen"/>
<result property="combined" column="combined"/>
</resultMap>

<insert id="insertCpuUsage" parameterMap="resourceCpuParameterMap">
INSERT INTO re_res_dynamic_table_$tableSubName$ (remote_time, "user", sys, nice, idle, wait, irq, softIrq, stolen, combined) values (?,?,?,?,?,?,?,?,?,?)
</insert>

<select id="getCpuUsage" parameterClass="java.lang.String" resultMap="resourceCpuResultMap">
SELECT * FROM re_res_dynamic_table_$tableSubName$ ORDER BY id ASC
</select>

<select id="getCpuUsageByTimeRange" parameterClass="com.redhat.reportengine.server.dbmap.ResourceCpu" resultMap="resourceCpuResultMap">
SELECT * FROM re_res_dynamic_table_$tableSubName$ WHERE local_time &gt;='$fromTime$' AND local_time &lt;='$toTime$' ORDER BY id ASC
</select>

<select id="getCpuUsageCountByTimeRange" parameterClass="com.redhat.reportengine.server.dbmap.ResourceCpu" resultClass="java.lang.Long">
SELECT count(id) FROM re_res_dynamic_table_$tableSubName$ WHERE local_time &gt;='$fromTime$' AND local_time &lt;='$toTime$'
</select>

<!-- CPU - Usage - END -->

<!-- CPUs - Usage -START -->
<parameterMap id="resourceCpusParameterMap" class="com.redhat.reportengine.server.dbmap.ResourceCpus">
<parameter property="remoteTime"/>
<parameter property="user"/>
<parameter property="sys"/>
<parameter property="nice"/>
<parameter property="idle"/>
<parameter property="wait"/>
<parameter property="irq"/>
<parameter property="softIrq"/>
<parameter property="stolen"/>
<parameter property="combined"/>
</parameterMap>

<insert id="insertCpusUsage" parameterMap="resourceCpusParameterMap">
INSERT INTO re_res_dynamic_table_$tableSubName$ (remote_time, "user", sys, nice, idle, wait, irq, softIrq, stolen, combined) values (?,?,?,?,?,?,?,?,?,?)
</insert>

<select id="getCpusUsage" parameterClass="java.lang.String" resultClass="com.redhat.reportengine.server.dbmap.ResourceCpus">
SELECT * FROM re_res_dynamic_table_$tableSubName$ ORDER BY id ASC
</select>

<select id="getCpusUsageByTimeRange" parameterClass="com.redhat.reportengine.server.dbmap.ResourceCpus" resultClass="com.redhat.reportengine.server.dbmap.ResourceCpus">
SELECT * FROM re_res_dynamic_table_$tableSubName$ WHERE local_time &gt;='$fromTime$' AND local_time &lt;='$toTime$' ORDER BY id ASC
</select>

<select id="getCpusUsageCountByTimeRange" parameterClass="com.redhat.reportengine.server.dbmap.ResourceCpus" resultClass="java.lang.Long">
SELECT count(id) FROM re_res_dynamic_table_$tableSubName$ WHERE local_time &gt;='$fromTime$' AND local_time &lt;='$toTime$'
</select>

<!-- CPUs - Usage - END -->


<!-- Server Table -->
<parameterMap id="serverInsertParameterMap" class="com.redhat.reportengine.server.dbmap.Server">
<parameter property="name"/>
<parameter property="hostIp"/>
<parameter property="macAddr"/>
<parameter property="agentPort"/>
<parameter property="updateInterval"/>
</parameterMap>

<parameterMap id="serverUpdateParameterMap" class="com.redhat.reportengine.server.dbmap.Server">
<parameter property="name"/>
<parameter property="hostIp"/>
<parameter property="macAddr"/>
<parameter property="agentPort"/>
<parameter property="updateInterval"/>
<parameter property="platform"/>
<parameter property="id"/>
</parameterMap>

<resultMap id="serverResultMap" class="com.redhat.reportengine.server.dbmap.Server">
<result property="id" column="id"/>
<result property="name" column="name"/>
<result property="hostIp" column="host_ip"/>
<result property="macAddr" column="mac_addr"/>
<result property="platform" column="platform"/>
<result property="agentPort" column="agent_port"/>
<result property="referenceKey" column="reference_key"/>
<result property="discoveryStatus" column="discovery_status"/>
<result property="updateInterval" column="update_interval"/>
<result property="creationTime" column="creation_time"/>
<result property="reachable" column="reachable"/>
<result property="agentStatus" column="agent_status"/>
<result property="localTime" column="local_time"/>
</resultMap>

<insert id="insertServerDetail" parameterMap="serverInsertParameterMap">
INSERT INTO re_server (name, host_ip, mac_addr, agent_port, update_interval) values (?,?,?,?,?)
</insert>

<update id="updateServerDetail" parameterMap="serverUpdateParameterMap">
UPDATE re_server SET name=?, host_ip=?, mac_addr=?, agent_port=?, update_interval=?, platform=? WHERE id=?
</update>

<select id="getServerDetailAll" resultMap="serverResultMap">
SELECT * FROM re_view_getserverdetailwithstatus ORDER BY id ASC
</select>

<select id="getServerDetailById" parameterClass="java.lang.Integer" resultMap="serverResultMap">
SELECT * FROM re_view_getserverdetailwithstatus WHERE id=$id$
</select>

<select id="getServerDetailByName" parameterClass="java.lang.String" resultMap="serverResultMap">
SELECT * FROM re_view_getserverdetailwithstatus WHERE name='$name$' 
</select>

<select id="getServerDetailByMacAddr" parameterClass="java.lang.String" resultMap="serverResultMap">
SELECT * FROM re_view_getserverdetailwithstatus WHERE mac_addr='$macAddr$'
</select>

<select id="getServerDetailByHostId" parameterClass="java.lang.String" resultMap="serverResultMap">
SELECT * FROM re_view_getserverdetailwithstatus WHERE host_ip='$hostIp$' 
</select>

<delete id="deleteServerDetailById" parameterClass="java.lang.Integer">
DELETE FROM re_server WHERE id=$id$
</delete>

<!-- Server Table - END -->

<!-- Server-JOB  Table START -->
<parameterMap id="serverJobInsertParameterMap" class="com.redhat.reportengine.server.dbmap.ServerJob">
<parameter property="serverId"/>
<parameter property="jobId"/>
</parameterMap>

<resultMap id="serverJobResultMap" class="com.redhat.reportengine.server.dbmap.ServerJob">
<result property="id" column="id"/>
<result property="serverId" column="server_id"/>
<result property="jobId" column="job_id"/>
</resultMap>

<insert id="insertServerJobDetail" parameterMap="serverJobInsertParameterMap">
INSERT INTO re_server_job (server_id, job_id) values (?,?)
</insert>

<select id="getServerJobDetailAll" resultMap="serverJobResultMap">
SELECT * FROM re_server_job ORDER BY server_id ASC
</select>

<select id="getServerJobDetailByServerId" parameterClass="java.lang.Integer" resultMap="serverJobResultMap">
SELECT * FROM re_server_job WHERE server_id=$serverId$
</select>

<select id="getServerJobDetailByJobId" parameterClass="java.lang.String" resultMap="serverJobResultMap">
SELECT * FROM re_server_job WHERE job_id=$jobId$
</select>

<delete id="deleteServerJobDetailByServerId" parameterClass="java.lang.Integer">
DELETE FROM re_server_job WHERE server_id=$serverId$
</delete>

<delete id="deleteServerJobDetailByJobId" parameterClass="java.lang.Integer">
DELETE FROM re_server_job WHERE job_id=$jobId$
</delete>

<!-- Server-JOB Table - END -->


<!-- Server Status Table - START -->
<parameterMap id="serverStatusInsertParameterMap" class="com.redhat.reportengine.server.dbmap.ServerStatus">
<parameter property="serverId"/>
<parameter property="reachable"/>
<parameter property="agentStatus"/>
</parameterMap>

<parameterMap id="serverStatusTimeRangeParameterMap" class="com.redhat.reportengine.server.dbmap.ServerStatus">
<parameter property="serverId"/>
<parameter property="reachable"/>
<parameter property="agentStatus"/>
</parameterMap>

<resultMap id="serverStatusResultMap" class="com.redhat.reportengine.server.dbmap.ServerStatus">
<result property="id" column="id"/>
<result property="serverId" column="server_id"/>
<result property="reachable" column="reachable"/>
<result property="agentStatus" column="agent_status"/>
<result property="localTime" column="local_time"/>
</resultMap>

<insert id="insertServerStatusDetail" parameterMap="serverStatusInsertParameterMap">
INSERT INTO re_server_status (server_id, reachable, agent_status) values (?,?,?)
</insert>

<select id="getServerStatusDetailByServerId" parameterClass="java.lang.Integer" resultMap="serverStatusResultMap">
SELECT * FROM re_server_status WHERE server_id=$serverId$
</select>

<select id="getServerStatusDetailByTimeRange" parameterMap="serverStatusTimeRangeParameterMap" resultMap="serverStatusResultMap">
SELECT * FROM re_server_status WHERE server_id=? AND local_time &gt;= ? AND local_time &lt;= ?  ORDER BY id ASC
</select>

<delete id="deleteServerStatusDetailByServerId" parameterClass="java.lang.Integer">
DELETE FROM re_server_status WHERE server_id=$id$
</delete>



<!-- Resource measurement - Memory - START-->
<insert id="createMemoryTableSequence" parameterClass="java.lang.String">
CREATE SEQUENCE re_res_dynamic_seq_$tableSubName$
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
</insert>

<insert id="createMemoryTable" parameterClass="java.lang.String">
CREATE TABLE re_res_dynamic_table_$tableSubName$
(
  id bigint NOT NULL default nextval('re_res_dynamic_seq_$tableSubName$'),
  local_time timestamp NOT NULL DEFAULT statement_timestamp(),
  remote_time timestamp NOT NULL,
  total bigint NOT NULL,
  used bigint NOT NULL,
  actual_used bigint NOT NULL,
  swap_total bigint NOT NULL,
  swap_used bigint NOT NULL,
  swap_page_in bigint NOT NULL,
  swap_page_out bigint NOT NULL,
  unique(id)
);
</insert>

<parameterMap id="resourceMemoryParameterMap" class="com.redhat.reportengine.server.dbmap.ResourceMemory">
<parameter property="remoteTime"/>
<parameter property="total"/>
<parameter property="used"/>
<parameter property="actualUsed"/>
<parameter property="swapTotal"/>
<parameter property="swapUsed"/>
<parameter property="swapPageIn"/>
<parameter property="swapPageOut"/>
</parameterMap>

<resultMap id="resourceMemoryResultMap" class="com.redhat.reportengine.server.dbmap.ResourceMemory">
<result property="id" column="id"/>
<result property="localTime" column="local_time"/>
<result property="remoteTime" column="remote_time"/>
<result property="total" column="total"/>
<result property="used" column="used"/>
<result property="actualUsed" column="actual_used"/>
<result property="swapTotal" column="swap_total"/>
<result property="swapUsed" column="swap_used"/>
<result property="swapPageIn" column="swap_page_in"/>
<result property="swapPageOut" column="swap_page_out"/>
</resultMap>

<insert id="insertMemoryUsage" parameterMap="resourceMemoryParameterMap">
INSERT INTO re_res_dynamic_table_$tableSubName$ (remote_time, total, used, actual_used, swap_total, swap_used, swap_page_in, swap_page_out) values (?,?,?,?,?,?,?,?)
</insert>

<select id="getMemoryUsage" parameterClass="java.lang.String" resultMap="resourceMemoryResultMap">
SELECT * FROM re_res_dynamic_table_$tableSubName$  ORDER BY id ASC
</select>

<select id="getMemoryUsageByTimeRange" parameterClass="com.redhat.reportengine.server.dbmap.ResourceMemory" resultMap="resourceMemoryResultMap">
SELECT * FROM re_res_dynamic_table_$tableSubName$ WHERE local_time &gt;='$fromTime$' AND local_time &lt;='$toTime$' ORDER BY id ASC
</select>

<select id="getMemoryUsageCountByTimeRange" parameterClass="com.redhat.reportengine.server.dbmap.ResourceMemory" resultClass="java.lang.Long">
SELECT count(id) FROM re_res_dynamic_table_$tableSubName$ WHERE local_time &gt;='$fromTime$' AND local_time &lt;='$toTime$'
</select>

<!-- Resource measurement - Memory - END-->

<!-- Server CPU Detail - START-->
<parameterMap id="serverCpuDetailParameterMap" class="com.redhat.reportengine.server.dbmap.ServerCpuDetail">
<parameter property="remoteTime"/>
<parameter property="serverId"/>
<parameter property="cacheSize"/>
<parameter property="coresPerSocket"/>
<parameter property="mhz"/>
<parameter property="model"/>
<parameter property="totalCores"/>
<parameter property="totalSockets"/>
<parameter property="vendor"/>
</parameterMap>

<resultMap id="serverCpuDetailResultMap" class="com.redhat.reportengine.server.dbmap.ServerCpuDetail">
<result property="id" column="id"/>
<result property="localTime" column="local_time"/>
<result property="remoteTime" column="remote_time"/>
<result property="serverId" column="server_id"/>
<result property="cacheSize" column="cache_size"/>
<result property="coresPerSocket" column="cores_per_socket"/>
<result property="mhz" column="mhz"/>
<result property="model" column="model"/>
<result property="totalCores" column="total_cores"/>
<result property="totalSockets" column="total_sockets"/>
<result property="vendor" column="vendor"/>
</resultMap>

<insert id="insertServerCpuDetail" parameterMap="serverCpuDetailParameterMap">
INSERT INTO re_server_cpu_detail (remote_time, server_id, cache_size, cores_per_socket, mhz, model, total_cores, total_sockets, vendor) values (?,?,?,?,?,?,?,?,?)
</insert>

<update id="updateServerCpuDetail" parameterMap="serverCpuDetailParameterMap">
UPDATE re_server_cpu_detail SET local_time=statement_timestamp(), remote_time=?, server_id=?, cache_size=?, cores_per_socket=?, mhz=?, model=?, total_cores=?, total_sockets=?, vendor=? WHERE server_id=$serverId$
</update>

<select id="getServerCpuDetailByServerId" parameterClass="java.lang.Integer" resultMap="serverCpuDetailResultMap">
SELECT * FROM re_server_cpu_detail WHERE server_id=$serverId$
</select>

<delete id="deleteServerCpuDetailByServerId" parameterClass="java.lang.Integer" >
DELETE FROM re_server_cpu_detail WHERE server_id=$serverId$
</delete>

<!-- Server CPU Detail - END-->

<!-- Server Network Detail - START-->
<parameterMap id="serverNetworkDetailParameterMap" class="com.redhat.reportengine.server.dbmap.ServerNetworkDetail">
<parameter property="remoteTime"/>
<parameter property="serverId"/>
<parameter property="hostname"/>
<parameter property="defaultGateway"/>
<parameter property="primaryDns"/>
<parameter property="secondaryDns"/>
<parameter property="domainName"/>
<parameter property="interfaceName"/>
<parameter property="interfaceDescription"/>
<parameter property="interfaceType"/>
<parameter property="ipAddress"/>
<parameter property="subnetmask"/>
<parameter property="broadcast"/>
<parameter property="destination"/>
<parameter property="mac"/>
<parameter property="flags"/>
<parameter property="metric"/>
<parameter property="mtu"/>
</parameterMap>

<resultMap id="serverNetworkDetailResultMap" class="com.redhat.reportengine.server.dbmap.ServerNetworkDetail">
<result property="id" column="id"/>
<result property="localTime" column="local_time"/>
<result property="remoteTime" column="remote_time"/>
<result property="serverId" column="server_id"/>
<result property="hostname" column="hostname"/>
<result property="defaultGateway" column="default_gateway"/>
<result property="primaryDns" column="primary_dns"/>
<result property="secondaryDns" column="secondary_dns"/>
<result property="domainName" column="domain_name"/>
<result property="interfaceName" column="iface_name"/>
<result property="interfaceDescription" column="iface_description"/>
<result property="interfaceType" column="iface_type"/>
<result property="ipAddress" column="ip_address"/>
<result property="subnetmask" column="subnetmask"/>
<result property="broadcast" column="broadcast"/>
<result property="destination" column="destination"/>
<result property="mac" column="mac"/>
<result property="flags" column="flags"/>
<result property="metric" column="metric"/>
<result property="mtu" column="mtu"/>
</resultMap>

<insert id="insertServerNetworkDetail" parameterMap="serverNetworkDetailParameterMap">
INSERT INTO re_server_network_detail (remote_time, server_id, hostname, default_gateway, primary_dns, secondary_dns, domain_name, iface_name, iface_description, iface_type, ip_address, subnetmask, broadcast, destination, mac, flags, metric, mtu) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
</insert>

<update id="updateServerNetworkDetail" parameterMap="serverNetworkDetailParameterMap">
UPDATE re_server_network_detail SET local_time=statement_timestamp(), remote_time=?, server_id=?, hostname=?, default_gateway=?, primary_dns=?, secondary_dns=?, domain_name=?, iface_name=?, iface_description=?, iface_type=?, ip_address=?, subnetmask=?, broadcast=?, destination=?, mac=?, flags=?, metric=?, mtu=? WHERE server_id=$serverId$
</update>

<select id="getServerNetworkDetailByServerId" parameterClass="java.lang.Integer" resultMap="serverNetworkDetailResultMap">
SELECT * FROM re_server_network_detail WHERE server_id=$serverId$
</select>

<delete id="deleteServerNetworkDetailByServerId" parameterClass="java.lang.Integer" >
DELETE FROM re_server_network_detail WHERE server_id=$serverId$
</delete>

<!-- Server Network Detail - END-->


<!-- Server OS Detail - START-->

<parameterMap id="serverOsDetailParameterMap" class="com.redhat.reportengine.server.dbmap.ServerOsDetail">
<parameter property="remoteTime"/>
<parameter property="serverId"/>
<parameter property="name"/>
<parameter property="description"/>
<parameter property="arch"/>
<parameter property="machine"/>
<parameter property="kernelVersion"/>
<parameter property="patchLevel"/>
<parameter property="vendor"/>
<parameter property="vendorVersion"/>
<parameter property="vendorCodeName"/>
<parameter property="dataModel"/>
<parameter property="cpuEndian"/>
<parameter property="vendorName"/>
</parameterMap>

<resultMap id="serverOsDetailResultMap" class="com.redhat.reportengine.server.dbmap.ServerOsDetail">
<result property="id" column="id"/>
<result property="localTime" column="local_time"/>
<result property="remoteTime" column="remote_time"/>
<result property="serverId" column="server_id"/>
<result property="name" column="name"/>
<result property="description" column="description"/>
<result property="arch" column="arch"/>
<result property="machine" column="machine"/>
<result property="kernelVersion" column="kernel_version"/>
<result property="patchLevel" column="patch_level"/>
<result property="vendor" column="vendor"/>
<result property="vendorVersion" column="vendor_version"/>
<result property="vendorCodeName" column="vendor_code_name"/>
<result property="dataModel" column="data_model"/>
<result property="cpuEndian" column="cpu_endian"/>
<result property="vendorName" column="vendor_name"/>
</resultMap>

<insert id="insertServerOsDetail" parameterMap="serverOsDetailParameterMap">
INSERT INTO re_server_os_detail (remote_time, server_id, name, description, arch, machine, kernel_version, patch_level, vendor, vendor_version, vendor_code_name, data_model, cpu_endian, vendor_name) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
</insert>

<update id="updateServerOsDetail" parameterMap="serverOsDetailParameterMap">
UPDATE re_server_os_detail SET local_time=statement_timestamp(), remote_time=?, server_id=?, name=?, description=?, arch=?, machine=?, kernel_version=?, patch_level=?, vendor=?, vendor_version=?, vendor_code_name=?, data_model=?, cpu_endian=?, vendor_name=? WHERE server_id=$serverId$
</update>

<select id="getServerOsDetailByServerId" parameterClass="java.lang.Integer" resultMap="serverOsDetailResultMap">
SELECT * FROM re_server_os_detail WHERE server_id=$serverId$
</select>

<delete id="deleteServerOsDetailByServerId" parameterClass="java.lang.Integer" >
DELETE FROM re_server_os_detail WHERE server_id=$serverId$
</delete>
<!-- Server Os Detail - END-->

<!-- Server MEMORY Detail - START-->

<parameterMap id="serverMemoryDetailParameterMap" class="com.redhat.reportengine.server.dbmap.ServerMemoryDetail">
<parameter property="remoteTime"/>
<parameter property="serverId"/>
<parameter property="physical"/>
<parameter property="swap"/>
</parameterMap>

<resultMap id="serverMemoryDetailResultMap" class="com.redhat.reportengine.server.dbmap.ServerMemoryDetail">
<result property="id" column="id"/>
<result property="localTime" column="local_time"/>
<result property="remoteTime" column="remote_time"/>
<result property="serverId" column="server_id"/>
<result property="physical" column="physical"/>
<result property="swap" column="swap"/>
</resultMap>

<insert id="insertServerMemoryDetail" parameterMap="serverMemoryDetailParameterMap">
INSERT INTO re_server_memory_detail (remote_time, server_id, physical, swap) values (?,?,?,?)
</insert>

<update id="updateServerMemoryDetail" parameterMap="serverMemoryDetailParameterMap">
UPDATE re_server_memory_detail SET local_time=statement_timestamp(), remote_time=?, server_id=?, physical=?, swap=? WHERE server_id=$serverId$
</update>

<select id="getServerMemoryDetailByServerId" parameterClass="java.lang.Integer" resultMap="serverMemoryDetailResultMap">
SELECT * FROM re_server_memory_detail WHERE server_id=$serverId$
</select>

<delete id="deleteServerMemoryDetailByServerId" parameterClass="java.lang.Integer" >
DELETE FROM re_server_memory_detail WHERE server_id=$serverId$
</delete>

<!-- Server Memory Detail - END-->

<!-- Drop Resource Tables - START-->

<!-- CPU Table-->
<delete id="dropCpuTableSequence" parameterClass="java.lang.String" >
DROP SEQUENCE IF EXISTS re_resource_cpu_id_seq_$tableName$ CASCADE
</delete>

<delete id="dropCpuTable" parameterClass="java.lang.String" >
DROP TABLE IF EXISTS re_resource_cpu_$tableName$ CASCADE
</delete>

<!-- Memory Table-->

<delete id="dropMemoryTableSequence" parameterClass="java.lang.String" >
DROP SEQUENCE IF EXISTS re_resource_memory_id_seq_$tableName$ CASCADE
</delete>

<delete id="dropMemoryTable" parameterClass="java.lang.String" >
DROP TABLE IF EXISTS re_resource_memory_$tableName$ CASCADE
</delete>


<!-- Drop Resource Tables - END-->

<!-- Test Reference : Server Map - START -->

<parameterMap id="TestReferenceServerMapParameterMap" class="com.redhat.reportengine.server.dbmap.TestReferenceServerMap">
<parameter property="testSuiteReferenceId"/>
<parameter property="serverId"/>
</parameterMap>

<resultMap id="TestReferenceServerMapResultMap" class="com.redhat.reportengine.server.dbmap.TestReferenceServerMap">
<result property="testSuiteReferenceId" column="test_reference_id"/>
<result property="serverId" column="server_id"/>
</resultMap>

<resultMap id="TestReferenceServerMapTestSuitesResultMap" class="com.redhat.reportengine.server.dbmap.TestReferenceServerMap">
<result property="testSuiteReferenceId" column="test_reference_id"/>
<result property="testSuiteReferenceName" column="test_reference_name"/>
</resultMap>

<resultMap id="TestReferenceServerFullMapResultMap" class="com.redhat.reportengine.server.dbmap.TestReferenceServerMap">
<result property="testSuiteReferenceId" column="test_reference_id"/>
<result property="serverId" column="server_id"/>
<result property="serverName" column="server_name"/>
</resultMap>


<insert id="insertTestServerMapReference" parameterMap="TestReferenceServerMapParameterMap">
INSERT INTO re_test_reference_server_map (test_reference_id, server_id) values (?,?)
</insert>

<select id="getTestServerMapReferenceAll" resultMap="TestReferenceServerMapResultMap">
SELECT * FROM re_test_reference_server_map ORDER BY test_reference_id ASC
</select>

<select id="getTestServerMap-TestSuites" resultMap="TestReferenceServerMapTestSuitesResultMap">
SELECT id AS test_reference_id, test_reference AS test_reference_name FROM re_test_reference WHERE id IN (SELECT DISTINCT test_reference_id FROM re_test_reference_server_map)
</select>

<select id="getTestServerMap-ServersByTestSuiteId" parameterClass="java.lang.Integer" resultClass="java.lang.String">
SELECT array_to_string(array(SELECT name || ' ['||host_ip||']' AS server_name from re_server WHERE id IN (SELECT server_id FROM re_test_reference_server_map WHERE test_reference_id=$testSuiteReferenceId$)), ', ') AS server_name
</select>

<select id="getTestServerMapReferenceByTestReferenceId" parameterClass="java.lang.Integer" resultMap="TestReferenceServerMapResultMap">
SELECT * FROM re_test_reference_server_map WHERE test_reference_id=$testReferenceId$
</select>

<select id="getTestServerMapReferenceDetailByTestReferenceId" parameterClass="java.lang.Integer" resultMap="TestReferenceServerFullMapResultMap">
SELECT rsm.test_reference_id, rsm.server_id, sr.name AS server_name from re_test_reference_server_map AS rsm, re_server as sr WHERE sr.id=rsm.server_id AND test_reference_id=$testReferenceId$
</select>

<select id="getTestServerMapReferenceByServerId" parameterClass="java.lang.Integer" resultMap="TestReferenceServerMapResultMap">
SELECT * FROM re_test_reference_server_map WHERE server_id=$serverId$
</select>

<delete id="deleteTestServerMapReferenceByTestId" parameterClass="java.lang.Integer">
DELETE FROM re_test_reference_server_map WHERE test_reference_id=$testReferenceId$
</delete>

<delete id="deleteTestServerMapReferenceByServerId" parameterClass="java.lang.Integer">
DELETE FROM re_test_reference_server_map WHERE server_id=$serverId$
</delete>

<!-- Test Reference : Server Map - END -->


<!-- Resource measurement - JVM Memory - START-->
<insert id="createJvmMemoryTableSequence" parameterClass="java.lang.String">
CREATE SEQUENCE re_res_dynamic_seq_$tableSubName$
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 1
  CACHE 1;
</insert>

<insert id="createJvmMemoryTable" parameterClass="java.lang.String">
CREATE TABLE re_res_dynamic_table_$tableSubName$
(
  id bigint NOT NULL default nextval('re_res_dynamic_seq_$tableSubName$'),
  local_time timestamp NOT NULL DEFAULT statement_timestamp(),
  remote_time timestamp NOT NULL,
  heap_memory boolean NOT NULL DEFAULT true,
  committed bigint NOT NULL,
  init bigint NOT NULL,
  max bigint NOT NULL,
  used bigint NOT NULL,
  unique(id)
);
</insert>

<parameterMap id="resourceJvmMemoryParameterMap" class="com.redhat.reportengine.server.dbmap.JvmMemory">
<parameter property="remoteTime"/>
<parameter property="heapMemory"/>
<parameter property="committed"/>
<parameter property="init"/>
<parameter property="max"/>
<parameter property="used"/>
</parameterMap>

<resultMap id="resourceJvmMemoryResultMap" class="com.redhat.reportengine.server.dbmap.JvmMemory">
<result property="id" column="id"/>
<result property="localTime" column="local_time"/>
<result property="remoteTime" column="remote_time"/>
<result property="heapMemory" column="heap_memory"/>
<result property="committed" column="committed"/>
<result property="init" column="init"/>
<result property="max" column="max"/>
<result property="used" column="used"/>
</resultMap>

<insert id="insertJvmMemoryUsage" parameterMap="resourceJvmMemoryParameterMap">
INSERT INTO re_res_dynamic_table_$tableSubName$ (remote_time, heap_memory, committed, init, max, used) values (?,?,?,?,?,?)
</insert>

<select id="getJvmMemoryUsage" parameterClass="java.lang.String" resultMap="resourceJvmMemoryResultMap">
SELECT * FROM re_res_dynamic_table_$tableSubName$  ORDER BY id ASC
</select>

<select id="getJvmMemoryHeapUsageByTimeRange" parameterClass="com.redhat.reportengine.server.dbmap.JvmMemory" resultMap="resourceJvmMemoryResultMap">
SELECT * FROM re_res_dynamic_table_$tableSubName$ WHERE (heap_memory IS true) AND local_time &gt;='$fromTime$' AND local_time &lt;='$toTime$' ORDER BY id ASC
</select>

<select id="getJvmMemoryNonHeapUsageByTimeRange" parameterClass="com.redhat.reportengine.server.dbmap.JvmMemory" resultMap="resourceJvmMemoryResultMap">
SELECT * FROM re_res_dynamic_table_$tableSubName$ WHERE (heap_memory IS false) AND local_time &gt;='$fromTime$' AND local_time &lt;='$toTime$' ORDER BY id ASC
</select>

<select id="getJvmMemoryUsageCountByTimeRange" parameterClass="com.redhat.reportengine.server.dbmap.JvmMemory" resultClass="java.lang.Long">
SELECT count(id) FROM re_res_dynamic_table_$tableSubName$ WHERE local_time &gt;='$fromTime$' AND local_time &lt;='$toTime$'
</select>

<!-- Resource measurement - JVM Memory - END-->

<!-- Resource measurement - Dyanmic Table Name - Start-->

<parameterMap id="tableDynamicTableNameParameterMap" class="com.redhat.reportengine.server.dbmap.DynamicTableName">
<parameter property="serverId"/>
<parameter property="name"/>
<parameter property="tableType"/>
</parameterMap>

<resultMap id="tableDynamicTableNameResultMap" class="com.redhat.reportengine.server.dbmap.DynamicTableName">
<result property="id" column="id"/>
<result property="serverId" column="server_id"/>
<result property="name" column="name"/>
<result property="tableType" column="table_type"/>
</resultMap>

<insert id="insertDynamicTableName" parameterMap="tableDynamicTableNameParameterMap">
INSERT INTO re_server_dynamic_table_name (server_id, name, table_type) values (?,?,?)
</insert>

<select id="getDynamicTableName" parameterClass="java.lang.String" resultMap="tableDynamicTableNameResultMap">
SELECT * FROM re_server_dynamic_table_name where name='$name$'
</select>

<select id="getDynamicTableNameByServerId" parameterClass="java.lang.Integer" resultMap="tableDynamicTableNameResultMap">
SELECT * FROM re_server_dynamic_table_name where server_id=$serverId$
</select>

<select id="getDynamicTableNameById" parameterClass="java.lang.Integer" resultMap="tableDynamicTableNameResultMap">
SELECT * FROM re_server_dynamic_table_name where id=$id$
</select>

<select id="getDynamicTableNameByServerIdAndType" parameterClass="com.redhat.reportengine.server.dbmap.DynamicTableName" resultMap="tableDynamicTableNameResultMap">
SELECT * FROM re_server_dynamic_table_name where server_id=$serverId$ AND table_type='$tableType$'
</select>

<select id="deleteDynamicTableNameById" parameterClass="java.lang.Integer" resultMap="resourceJvmMemoryResultMap">
SELECT * FROM re_server_dynamic_table_name WHERE id=$id$
</select>

<select id="deleteDynamicTableNameByServerId" parameterClass="java.lang.Integer" resultMap="resourceJvmMemoryResultMap">
SELECT * FROM re_server_dynamic_table_name WHERE server_id=$serverId$
</select>

<select id="deleteDynamicTableNameByName" parameterClass="java.lang.String" resultMap="resourceJvmMemoryResultMap">
SELECT * FROM re_server_dynamic_table_name WHERE name='$name$'
</select>

<delete id="dropDynamicTable" parameterClass="java.lang.String" >
DROP SEQUENCE IF EXISTS re_res_dynamic_seq_$tableName$ CASCADE
</delete>

<delete id="dropDynamicTableSequence" parameterClass="java.lang.String" >
DROP TABLE IF EXISTS re_res_dynamic_table_$tableName$ CASCADE
</delete>


<!-- Resource measurement - Dyanmic Table Name - END-->


</sqlMap>
